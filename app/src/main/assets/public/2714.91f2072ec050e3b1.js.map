{"version":3,"file":"2714.91f2072ec050e3b1.js","mappings":"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","names":["cloneMap","WeakMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","disabledClonedInput","has","addClone","removeClone","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","disabled","appendChild","set","tx","ownerDocument","dir","style","pointerEvents","transform","clone","get","delete","remove","SKIP_SELECTOR","PADDING_TIMER_KEY","setScrollPadding","contentEl","paddingAmount","clearCallback","timer","clearTimeout","setProperty","setTimeout","setClearScrollPaddingListener","doneCallback","addEventListener","clearScrollPadding","once","currentPadding","SKIP_SCROLL_ASSIST","enableScrollAssist","footerEl","keyboardHeight","enableScrollPadding","keyboardResize","disableClonedInput","addScrollPadding","undefined","mode","KeyboardResize","focusIn","_ref","_asyncToGenerator","hasAttribute","removeAttribute","jsSetFocus","apply","this","arguments","removeEventListener","setManualFocus","el","document","activeElement","setAttribute","focus","_ref2","scrollData","getScrollData","_a","calcScrollData","inputRect","contentRect","platformHeight","inputTop","top","inputBottom","bottom","visibleAreaTop","safeAreaTop","distanceToBottom","Math","min","distanceToTop","desiredScrollAmount","round","scrollAmount","duration","abs","scrollDuration","max","scrollPadding","inputSafeY","closest","getBoundingClientRect","defaultView","innerHeight","raf","click","window","scrollContentTimeout","scrollContent","_ref3","doubleKeyboardEventListener","scrollByPoint","scrollEl","getScrollElement","scrollHeight","clientHeight","scrollTop","type","_x","_x2","_x3","_x4","_x5","_x6","startInputShims","_ref4","config","platform","doc","isIOS","isAndroid","getNumber","scrollAssist","getBoolean","hideCaret","inputBlurring","inputs","Array","from","querySelectorAll","hideCaretMap","scrollAssistMap","keyboardResizeMode","Keyboard","registerInput","_ref5","Promise","resolve","componentOnReady","inputRoot","shadowRoot","querySelector","findClosestIonContent","rmFn","enableHideCaretOnScroll","scrollHideCaret","shouldHideCaret","input","getRootNode","isFocused","onBlur","showCaret","_x9","enableInputBlurring","focused","didScroll","onScroll","onFocusin","ev","active","matches","tapped","target","blur","detail","fn","unregisterInput","_x7","_x8"],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/input-shims-6f71b552.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { g as getScrollElement, c as scrollByPoint, f as findClosestIonContent } from './index-7373924f.js';\nimport { a as addEventListener, b as removeEventListener, r as raf, c as componentOnReady } from './helpers-f586db1c.js';\nimport { a as KeyboardResize, K as Keyboard } from './keyboard-856bc929.js';\nimport './index-e86f0117.js';\nimport './index-b32cad98.js';\n\nconst cloneMap = new WeakMap();\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0, disabledClonedInput = false) => {\n  if (cloneMap.has(componentEl) === shouldRelocate) {\n    return;\n  }\n  if (shouldRelocate) {\n    addClone(componentEl, inputEl, inputRelativeY, disabledClonedInput);\n  }\n  else {\n    removeClone(componentEl, inputEl);\n  }\n};\n// TODO(FW-2832): type\nconst isFocused = (input) => {\n  return input === input.getRootNode().activeElement;\n};\nconst addClone = (componentEl, inputEl, inputRelativeY, disabledClonedInput = false) => {\n  // this allows for the actual input to receive the focus from\n  // the user's touch event, but before it receives focus, it\n  // moves the actual input to a location that will not screw\n  // up the app's layout, and does not allow the native browser\n  // to attempt to scroll the input into place (messing up headers/footers)\n  // the cloned input fills the area of where native input should be\n  // while the native input fakes out the browser by relocating itself\n  // before it receives the actual focus event\n  // We hide the focused input (with the visible caret) invisible by making it scale(0),\n  const parentEl = inputEl.parentNode;\n  // DOM WRITES\n  const clonedEl = inputEl.cloneNode(false);\n  clonedEl.classList.add('cloned-input');\n  clonedEl.tabIndex = -1;\n  /**\n   * Making the cloned input disabled prevents\n   * Chrome for Android from still scrolling\n   * the entire page since this cloned input\n   * will briefly be hidden by the keyboard\n   * even though it is not focused.\n   *\n   * This is not needed on iOS. While this\n   * does not cause functional issues on iOS,\n   * the input still appears slightly dimmed even\n   * if we set opacity: 1.\n   */\n  if (disabledClonedInput) {\n    clonedEl.disabled = true;\n  }\n  parentEl.appendChild(clonedEl);\n  cloneMap.set(componentEl, clonedEl);\n  const doc = componentEl.ownerDocument;\n  const tx = doc.dir === 'rtl' ? 9999 : -9999;\n  componentEl.style.pointerEvents = 'none';\n  inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\n};\nconst removeClone = (componentEl, inputEl) => {\n  const clone = cloneMap.get(componentEl);\n  if (clone) {\n    cloneMap.delete(componentEl);\n    clone.remove();\n  }\n  componentEl.style.pointerEvents = '';\n  inputEl.style.transform = '';\n};\n/**\n * Factoring in 50px gives us some room\n * in case the keyboard shows password/autofill bars\n * asynchronously.\n */\nconst SCROLL_AMOUNT_PADDING = 50;\n\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\n  if (!scrollEl || !inputEl) {\n    return () => {\n      return;\n    };\n  }\n  const scrollHideCaret = (shouldHideCaret) => {\n    if (isFocused(inputEl)) {\n      relocateInput(componentEl, inputEl, shouldHideCaret);\n    }\n  };\n  const onBlur = () => relocateInput(componentEl, inputEl, false);\n  const hideCaret = () => scrollHideCaret(true);\n  const showCaret = () => scrollHideCaret(false);\n  addEventListener(scrollEl, 'ionScrollStart', hideCaret);\n  addEventListener(scrollEl, 'ionScrollEnd', showCaret);\n  inputEl.addEventListener('blur', onBlur);\n  return () => {\n    removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\n    removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\n    inputEl.removeEventListener('blur', onBlur);\n  };\n};\n\nconst SKIP_SELECTOR = 'input, textarea, [no-blur], [contenteditable]';\nconst enableInputBlurring = () => {\n  let focused = true;\n  let didScroll = false;\n  const doc = document;\n  const onScroll = () => {\n    didScroll = true;\n  };\n  const onFocusin = () => {\n    focused = true;\n  };\n  const onTouchend = (ev) => {\n    // if app did scroll return early\n    if (didScroll) {\n      didScroll = false;\n      return;\n    }\n    const active = doc.activeElement;\n    if (!active) {\n      return;\n    }\n    // only blur if the active element is a text-input or a textarea\n    if (active.matches(SKIP_SELECTOR)) {\n      return;\n    }\n    // if the selected target is the active element, do not blur\n    const tapped = ev.target;\n    if (tapped === active) {\n      return;\n    }\n    if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n      return;\n    }\n    focused = false;\n    // TODO FW-2796: find a better way, why 50ms?\n    setTimeout(() => {\n      if (!focused) {\n        active.blur();\n      }\n    }, 50);\n  };\n  addEventListener(doc, 'ionScrollStart', onScroll);\n  doc.addEventListener('focusin', onFocusin, true);\n  doc.addEventListener('touchend', onTouchend, false);\n  return () => {\n    removeEventListener(doc, 'ionScrollStart', onScroll, true);\n    doc.removeEventListener('focusin', onFocusin, true);\n    doc.removeEventListener('touchend', onTouchend, false);\n  };\n};\n\nconst SCROLL_ASSIST_SPEED = 0.3;\nconst getScrollData = (componentEl, contentEl, keyboardHeight) => {\n  var _a;\n  const itemEl = (_a = componentEl.closest('ion-item,[ion-item]')) !== null && _a !== void 0 ? _a : componentEl;\n  return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight // TODO(FW-2832): type\n  );\n};\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\n  // compute input's Y values relative to the body\n  const inputTop = inputRect.top;\n  const inputBottom = inputRect.bottom;\n  // compute visible area\n  const visibleAreaTop = contentRect.top;\n  const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n  // compute safe area\n  const safeAreaTop = visibleAreaTop + 15;\n  const safeAreaBottom = visibleAreaBottom - SCROLL_AMOUNT_PADDING;\n  // figure out if each edge of the input is within the safe area\n  const distanceToBottom = safeAreaBottom - inputBottom;\n  const distanceToTop = safeAreaTop - inputTop;\n  // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n  const desiredScrollAmount = Math.round(distanceToBottom < 0 ? -distanceToBottom : distanceToTop > 0 ? -distanceToTop : 0);\n  // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n  // gets focus, so make sure we don't scroll the input above the visible area\n  const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n  const distance = Math.abs(scrollAmount);\n  const duration = distance / SCROLL_ASSIST_SPEED;\n  const scrollDuration = Math.min(400, Math.max(150, duration));\n  return {\n    scrollAmount,\n    scrollDuration,\n    scrollPadding: keyboardHeight,\n    inputSafeY: -(inputTop - safeAreaTop) + 4,\n  };\n};\n\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\n/**\n * Scroll padding adds additional padding to the bottom\n * of ion-content so that there is enough scroll space\n * for an input to be scrolled above the keyboard. This\n * is needed in environments where the webview does not\n * resize when the keyboard opens.\n *\n * Example: If an input at the bottom of ion-content is\n * focused, there is no additional scrolling space below\n * it, so the input cannot be scrolled above the keyboard.\n * Scroll padding fixes this by adding padding equal to the\n * height of the keyboard to the bottom of the content.\n *\n * Common environments where this is needed:\n * - Mobile Safari: The keyboard overlays the content\n * - Capacitor/Cordova on iOS: The keyboard overlays the content\n * when the KeyboardResize mode is set to 'none'.\n */\nconst setScrollPadding = (contentEl, paddingAmount, clearCallback) => {\n  const timer = contentEl[PADDING_TIMER_KEY];\n  if (timer) {\n    clearTimeout(timer);\n  }\n  if (paddingAmount > 0) {\n    contentEl.style.setProperty('--keyboard-offset', `${paddingAmount}px`);\n  }\n  else {\n    contentEl[PADDING_TIMER_KEY] = setTimeout(() => {\n      contentEl.style.setProperty('--keyboard-offset', '0px');\n      if (clearCallback) {\n        clearCallback();\n      }\n    }, 120);\n  }\n};\n/**\n * When an input is about to be focused,\n * set a timeout to clear any scroll padding\n * on the content. Note: The clearing\n * is done on a timeout so that if users\n * are moving focus from one input to the next\n * then re-adding scroll padding to the new\n * input with cancel the timeout to clear the\n * scroll padding.\n */\nconst setClearScrollPaddingListener = (inputEl, contentEl, doneCallback) => {\n  const clearScrollPadding = () => {\n    if (contentEl) {\n      setScrollPadding(contentEl, 0, doneCallback);\n    }\n  };\n  inputEl.addEventListener('focusout', clearScrollPadding, { once: true });\n};\n\nlet currentPadding = 0;\nconst SKIP_SCROLL_ASSIST = 'data-ionic-skip-scroll-assist';\nconst enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, keyboardResize, disableClonedInput = false) => {\n  /**\n   * Scroll padding should only be added if:\n   * 1. The global scrollPadding config option\n   * is set to true.\n   * 2. The native keyboard resize mode is either \"none\"\n   * (keyboard overlays webview) or undefined (resize\n   * information unavailable)\n   * Resize info is available on Capacitor 4+\n   */\n  const addScrollPadding = enableScrollPadding && (keyboardResize === undefined || keyboardResize.mode === KeyboardResize.None);\n  /**\n   * When the input is about to receive\n   * focus, we need to move it to prevent\n   * mobile Safari from adjusting the viewport.\n   */\n  const focusIn = async () => {\n    /**\n     * Scroll assist should not run again\n     * on inputs that have been manually\n     * focused inside of the scroll assist\n     * implementation.\n     */\n    if (inputEl.hasAttribute(SKIP_SCROLL_ASSIST)) {\n      inputEl.removeAttribute(SKIP_SCROLL_ASSIST);\n      return;\n    }\n    jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight, addScrollPadding, disableClonedInput);\n  };\n  componentEl.addEventListener('focusin', focusIn, true);\n  return () => {\n    componentEl.removeEventListener('focusin', focusIn, true);\n  };\n};\n/**\n * Use this function when you want to manually\n * focus an input but not have scroll assist run again.\n */\nconst setManualFocus = (el) => {\n  /**\n   * If element is already focused then\n   * a new focusin event will not be dispatched\n   * to remove the SKIL_SCROLL_ASSIST attribute.\n   */\n  if (document.activeElement === el) {\n    return;\n  }\n  el.setAttribute(SKIP_SCROLL_ASSIST, 'true');\n  el.focus();\n};\nconst jsSetFocus = async (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, disableClonedInput = false) => {\n  if (!contentEl && !footerEl) {\n    return;\n  }\n  const scrollData = getScrollData(componentEl, (contentEl || footerEl), keyboardHeight);\n  if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\n    // the text input is in a safe position that doesn't\n    // require it to be scrolled into view, just set focus now\n    setManualFocus(inputEl);\n    /**\n     * Even though the input does not need\n     * scroll assist, we should preserve the\n     * the scroll padding as users could be moving\n     * focus from an input that needs scroll padding\n     * to an input that does not need scroll padding.\n     * If we remove the scroll padding now, users will\n     * see the page jump.\n     */\n    if (enableScrollPadding && contentEl !== null) {\n      setScrollPadding(contentEl, currentPadding);\n      setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\n    }\n    return;\n  }\n  // temporarily move the focus to the focus holder so the browser\n  // doesn't freak out while it's trying to get the input in place\n  // at this point the native text input still does not have focus\n  relocateInput(componentEl, inputEl, true, scrollData.inputSafeY, disableClonedInput);\n  setManualFocus(inputEl);\n  /**\n   * Relocating/Focusing input causes the\n   * click event to be cancelled, so\n   * manually fire one here.\n   */\n  raf(() => componentEl.click());\n  /**\n   * If enabled, we can add scroll padding to\n   * the bottom of the content so that scroll assist\n   * has enough room to scroll the input above\n   * the keyboard.\n   */\n  if (enableScrollPadding && contentEl) {\n    currentPadding = scrollData.scrollPadding;\n    setScrollPadding(contentEl, currentPadding);\n  }\n  if (typeof window !== 'undefined') {\n    let scrollContentTimeout;\n    const scrollContent = async () => {\n      // clean up listeners and timeouts\n      if (scrollContentTimeout !== undefined) {\n        clearTimeout(scrollContentTimeout);\n      }\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.removeEventListener('ionKeyboardDidShow', scrollContent);\n      // scroll the input into place\n      if (contentEl) {\n        await scrollByPoint(contentEl, 0, scrollData.scrollAmount, scrollData.scrollDuration);\n      }\n      // the scroll view is in the correct position now\n      // give the native text input focus\n      relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n      // ensure this is the focused input\n      setManualFocus(inputEl);\n      /**\n       * When the input is about to be blurred\n       * we should set a timeout to remove\n       * any scroll padding.\n       */\n      if (enableScrollPadding) {\n        setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\n      }\n    };\n    const doubleKeyboardEventListener = () => {\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.addEventListener('ionKeyboardDidShow', scrollContent);\n    };\n    if (contentEl) {\n      const scrollEl = await getScrollElement(contentEl);\n      /**\n       * scrollData will only consider the amount we need\n       * to scroll in order to properly bring the input\n       * into view. It will not consider the amount\n       * we can scroll in the content element.\n       * As a result, scrollData may request a greater\n       * scroll position than is currently available\n       * in the DOM. If this is the case, we need to\n       * wait for the webview to resize/the keyboard\n       * to show in order for additional scroll\n       * bandwidth to become available.\n       */\n      const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\n      if (scrollData.scrollAmount > totalScrollAmount - scrollEl.scrollTop) {\n        /**\n         * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\n         * after the initial keyboard is shown. This prevents the webview from resizing\n         * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\n         */\n        if (inputEl.type === 'password') {\n          // Add 50px to account for the \"Passwords\" bar\n          scrollData.scrollAmount += SCROLL_AMOUNT_PADDING;\n          window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n        }\n        else {\n          window.addEventListener('ionKeyboardDidShow', scrollContent);\n        }\n        /**\n         * This should only fire in 2 instances:\n         * 1. The app is very slow.\n         * 2. The app is running in a browser on an old OS\n         * that does not support Ionic Keyboard Events\n         */\n        scrollContentTimeout = setTimeout(scrollContent, 1000);\n        return;\n      }\n    }\n    scrollContent();\n  }\n};\n\nconst INPUT_BLURRING = true;\nconst startInputShims = async (config, platform) => {\n  const doc = document;\n  const isIOS = platform === 'ios';\n  const isAndroid = platform === 'android';\n  /**\n   * Hide Caret and Input Blurring are needed on iOS.\n   * Scroll Assist and Scroll Padding are needed on iOS and Android\n   * with Chrome web browser (not Chrome webview).\n   */\n  const keyboardHeight = config.getNumber('keyboardHeight', 290);\n  const scrollAssist = config.getBoolean('scrollAssist', true);\n  const hideCaret = config.getBoolean('hideCaretOnScroll', isIOS);\n  const inputBlurring = config.getBoolean('inputBlurring', isIOS);\n  const scrollPadding = config.getBoolean('scrollPadding', true);\n  const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n  const hideCaretMap = new WeakMap();\n  const scrollAssistMap = new WeakMap();\n  /**\n   * Grab the native keyboard resize configuration\n   * and pass it to scroll assist. Scroll assist requires\n   * that we adjust the input right before the input\n   * is about to be focused. If we called `Keyboard.getResizeMode`\n   * on focusin in scroll assist, we could potentially adjust the\n   * input too late since this call is async.\n   */\n  const keyboardResizeMode = await Keyboard.getResizeMode();\n  const registerInput = async (componentEl) => {\n    await new Promise((resolve) => componentOnReady(componentEl, resolve));\n    const inputRoot = componentEl.shadowRoot || componentEl;\n    const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n    const scrollEl = findClosestIonContent(componentEl);\n    const footerEl = !scrollEl ? componentEl.closest('ion-footer') : null;\n    if (!inputEl) {\n      return;\n    }\n    if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n      const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n      hideCaretMap.set(componentEl, rmFn);\n    }\n    /**\n     * date/datetime-locale inputs on mobile devices show date picker\n     * overlays instead of keyboards. As a result, scroll assist is\n     * not needed. This also works around a bug in iOS <16 where\n     * scroll assist causes the browser to lock up. See FW-1997.\n     */\n    const isDateInput = inputEl.type === 'date' || inputEl.type === 'datetime-local';\n    if (!isDateInput &&\n      (!!scrollEl || !!footerEl) &&\n      scrollAssist &&\n      !scrollAssistMap.has(componentEl)) {\n      const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight, scrollPadding, keyboardResizeMode, isAndroid);\n      scrollAssistMap.set(componentEl, rmFn);\n    }\n  };\n  const unregisterInput = (componentEl) => {\n    if (hideCaret) {\n      const fn = hideCaretMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      hideCaretMap.delete(componentEl);\n    }\n    if (scrollAssist) {\n      const fn = scrollAssistMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      scrollAssistMap.delete(componentEl);\n    }\n  };\n  if (inputBlurring && INPUT_BLURRING) {\n    enableInputBlurring();\n  }\n  // Input might be already loaded in the DOM before ion-device-hacks did.\n  // At this point we need to look for all of the inputs not registered yet\n  // and register them.\n  for (const input of inputs) {\n    registerInput(input);\n  }\n  // TODO(FW-2832): types\n  doc.addEventListener('ionInputDidLoad', ((ev) => {\n    registerInput(ev.detail);\n  }));\n  doc.addEventListener('ionInputDidUnload', ((ev) => {\n    unregisterInput(ev.detail);\n  }));\n};\n\nexport { startInputShims };\n"],"x_google_ignoreList":[0]}