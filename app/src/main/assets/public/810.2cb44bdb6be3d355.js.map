{"version":3,"file":"810.2cb44bdb6be3d355.js","mappings":"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","names":["_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_polyfillHostRe","_colonHostRe","_colonSlottedRe","_colonHostContextRe","_commentRe","_commentWithHashRe","_ruleRe","_curlyRe","BLOCK_PLACEHOLDER","processRules","input","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","replace","m","selector","content","suffix","contentPrefix","startsWith","blocks","substring","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","length","part","push","join","convertColonRule","cssText","regExp","partReplacer","parts","r","i","p","trim","colonHostPartReplacer","host","colonHostContextPartReplacer","indexOf","scopeSelectors","scopeSelectorText","hostSelector","slotSelector","commentOriginalSelector","scopeSelector","map","shallowPart","selectorNeedsScoping","makeScopeMatcher","test","applyStrictSelectorScope","className","_","_scopeSelectorPart","scopedP","applySimpleSelectorScope","lastIndex","replaceBy","before","colon","after","t","matches","match","safeContent","placeholders","index","keep","pseudo","exp","safeSelector","res","scopedSelector","startIndex","sep","shouldScope","exec","separator","slice","restoreSafeSelector","scopeCss","scopeId","hostScopeId","slotScopeId","commentsWithHash","extractCommentsWithHash","stripComments","orgSelectors","processCommentedSelector","placeholder","comment","scoped","scopeCssText","slotted","convertColonSlotted","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimRight","updatedSelector","convertColonHostContext","convertColonHost","insertPolyfillHostInCssText","reduce","result","pattern","convertShadowDOMSelectors","slottedSelectors","forEach"],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/pwa-elements/dist/esm/shadow-css-d7d058ec-d59cb009.js"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nconst safeSelector = (selector) => {\n    const placeholders = [];\n    let index = 0;\n    let content;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    const ss = {\n        content,\n        placeholders,\n    };\n    return ss;\n};\nconst restoreSafeSelector = (placeholders, content) => {\n    return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nconst _polyfillHost = '-shadowcsshost';\nconst _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = ')(?:\\\\((' +\n    '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' +\n    ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [\n    /::shadow/g,\n    /::content/g\n];\nconst _selectorReSuffix = '([>\\\\s~+\\[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonSlottedRe = /::slotted/gim;\nconst _colonHostContextRe = /:host-context/gim;\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nconst stripComments = (input) => {\n    return input.replace(_commentRe, '');\n};\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nconst extractCommentsWithHash = (input) => {\n    return input.match(_commentWithHashRe) || [];\n};\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst OPEN_CURLY = '{';\nconst CLOSE_CURLY = '}';\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst processRules = (input, ruleCallback) => {\n    const inputWithEscapedBlocks = escapeBlocks(input);\n    let nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n        const selector = m[2];\n        let content = '';\n        let suffix = m[4];\n        let contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        const cssRule = {\n            selector,\n            content\n        };\n        const rule = ruleCallback(cssRule);\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    });\n};\nconst escapeBlocks = (input) => {\n    const inputParts = input.split(_curlyRe);\n    const resultParts = [];\n    const escapedBlocks = [];\n    let bracketCount = 0;\n    let currentBlockParts = [];\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        const part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    const strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks\n    };\n    return strEscapedBlocks;\n};\nconst insertPolyfillHostInCssText = (selector) => {\n    selector = selector\n        .replace(_colonHostContextRe, _polyfillHostContext)\n        .replace(_colonHostRe, _polyfillHost)\n        .replace(_colonSlottedRe, _polyfillSlotted);\n    return selector;\n};\nconst convertColonRule = (cssText, regExp, partReplacer) => {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, (...m) => {\n        if (m[2]) {\n            const parts = m[2].split(',');\n            const r = [];\n            for (let i = 0; i < parts.length; i++) {\n                const p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nconst colonHostPartReplacer = (host, part, suffix) => {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nconst convertColonHost = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nconst colonHostContextPartReplacer = (host, part, suffix) => {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nconst convertColonSlotted = (cssText, slotScopeId) => {\n    const slotClass = '.' + slotScopeId + ' > ';\n    const selectors = [];\n    cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n        if (m[2]) {\n            const compound = m[2].trim();\n            const suffix = m[3];\n            const slottedSelector = slotClass + compound + suffix;\n            let prefixSelector = '';\n            for (let i = m[4] - 1; i >= 0; i--) {\n                const char = m[5][i];\n                if (char === '}' || char === ',') {\n                    break;\n                }\n                prefixSelector = char + prefixSelector;\n            }\n            const orgSelector = prefixSelector + slottedSelector;\n            const addedSelector = `${prefixSelector.trimRight()}${slottedSelector.trim()}`;\n            if (orgSelector.trim() !== addedSelector.trim()) {\n                const updatedSelector = `${addedSelector}, ${orgSelector}`;\n                selectors.push({\n                    orgSelector,\n                    updatedSelector,\n                });\n            }\n            return slottedSelector;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n    return {\n        selectors,\n        cssText\n    };\n};\nconst convertColonHostContext = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nconst convertShadowDOMSelectors = (cssText) => {\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n};\nconst makeScopeMatcher = (scopeSelector) => {\n    const lre = /\\[/g;\n    const rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nconst selectorNeedsScoping = (selector, scopeSelector) => {\n    const re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        const replaceBy = `.${hostSelector}`;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => {\n            return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {\n                return before + replaceBy + colon + after;\n            });\n        })\n            .replace(_polyfillHostRe, replaceBy + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\n    const isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n    const className = '.' + scopeSelector;\n    const _scopeSelectorPart = (p) => {\n        let scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            const t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                const matches = t.match(/([^:]*)(:*)(.*)/);\n                if (matches) {\n                    scopedP = matches[1] + className + matches[2] + matches[3];\n                }\n            }\n        }\n        return scopedP;\n    };\n    const safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    let scopedSelector = '';\n    let startIndex = 0;\n    let res;\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    let shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        const separator = res[1];\n        const part = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n        scopedSelector += `${scopedPart} ${separator} `;\n        startIndex = sep.lastIndex;\n    }\n    const part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n    return selector.split(',')\n        .map(shallowPart => {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n    return processRules(cssText, (rule) => {\n        let selector = rule.selector;\n        let content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n            rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        const cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content\n        };\n        return cssRule;\n    });\n};\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    const slotted = convertColonSlotted(cssText, slotScopeId);\n    cssText = slotted.cssText;\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return {\n        cssText: cssText.trim(),\n        slottedSelectors: slotted.selectors,\n    };\n};\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n    const hostScopeId = scopeId + '-h';\n    const slotScopeId = scopeId + '-s';\n    const commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    const orgSelectors = [];\n    if (commentOriginalSelector) {\n        const processCommentedSelector = (rule) => {\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\n            const comment = `/*!@${rule.selector}*/`;\n            orgSelectors.push({ placeholder, comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, rule => {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector(rule);\n            }\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(({ placeholder, comment }) => {\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    scoped.slottedSelectors.forEach(slottedSelector => {\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n    });\n    return cssText;\n};\n\nexport { scopeCss };\n"],"x_google_ignoreList":[0]}