{"version":3,"file":"5217.4c3368a351856f97.js","mappings":"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","names":["Encoding","UTF8","ASCII","UTF16","resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","FilesystemWeb","WebPlugin","constructor","_this","super","arguments","this","DB_VERSION","DB_NAME","_writeCmds","downloadFile","_ref","_asyncToGenerator","options","requestInit","buildRequestInit","webFetchExtra","response","fetch","url","blob","progress","body","reader","getReader","bytes","chunks","contentType","headers","get","contentLength","parseInt","done","value","read","notifyListeners","allChunks","Uint8Array","position","chunk","set","Blob","buffer","type","undefined","blobUrl","URL","createObjectURL","tempAnchor","document","createElement","appendChild","href","download","click","revokeObjectURL","removeChild","_x","apply","initDb","_this2","_db","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","static","event","db","target","objectStoreNames","contains","deleteObjectStore","createObjectStore","keyPath","createIndex","dbRequest","cmd","args","_this3","readFlag","indexOf","then","conn","req","transaction","objectStore","dbIndexRequest","indexName","_this4","index","getPath","directory","uriPath","cleanedUriPath","replace","fsPath","clear","_this5","readFile","_this6","entry","Error","data","content","writeFile","_this7","encoding","doRecursive","recursive","occupiedEntry","parentPath","substr","lastIndexOf","subDirIndex","parentArgPath","mkdir","isBase64String","now","Date","pathObj","folder","size","ctime","mtime","uri","appendFile","_this8","btoa","atob","deleteFile","_this9","IDBKeyRange","only","_this10","depth","match","parentEntry","rmdir","_this11","fullPath","readDirResult","readdir","files","entryPath","name","stat","_this12","entries","all","map","_ref2","e","subEntry","substring","_x2","getUri","_this13","_this14","rename","_this15","_copy","copy","_this16","requestPermissions","publicStorage","checkPermissions","doRename","_this17","toDirectory","to","from","fromDirectory","fromPath","toPath","isPathParent","parent","children","pathsA","pathsB","every","toObj","toPathComponents","fromObj","updateTime","_ref3","_x3","_x4","_x5","file","writeResult","contents","filename","str","_debug"],"sourceRoot":"webpack:///","sources":["./node_modules/@capacitor/filesystem/dist/esm/definitions.js","./node_modules/@capacitor/filesystem/dist/esm/web.js"],"sourcesContent":["export var Directory;\n(function (Directory) {\n    /**\n     * The Documents directory\n     * On iOS it's the app's documents directory.\n     * Use this directory to store user-generated content.\n     * On Android it's the Public Documents folder, so it's accessible from other apps.\n     * It's not accesible on Android 10 unless the app enables legacy External Storage\n     * by adding `android:requestLegacyExternalStorage=\"true\"` in the `application` tag\n     * in the `AndroidManifest.xml`.\n     * It's not accesible on Android 11 or newer.\n     *\n     * @since 1.0.0\n     */\n    Directory[\"Documents\"] = \"DOCUMENTS\";\n    /**\n     * The Data directory\n     * On iOS it will use the Documents directory.\n     * On Android it's the directory holding application files.\n     * Files will be deleted when the application is uninstalled.\n     *\n     * @since 1.0.0\n     */\n    Directory[\"Data\"] = \"DATA\";\n    /**\n     * The Library directory\n     * On iOS it will use the Library directory.\n     * On Android it's the directory holding application files.\n     * Files will be deleted when the application is uninstalled.\n     *\n     * @since 1.1.0\n     */\n    Directory[\"Library\"] = \"LIBRARY\";\n    /**\n     * The Cache directory\n     * Can be deleted in cases of low memory, so use this directory to write app-specific files\n     * that your app can re-create easily.\n     *\n     * @since 1.0.0\n     */\n    Directory[\"Cache\"] = \"CACHE\";\n    /**\n     * The external directory\n     * On iOS it will use the Documents directory\n     * On Android it's the directory on the primary shared/external\n     * storage device where the application can place persistent files it owns.\n     * These files are internal to the applications, and not typically visible\n     * to the user as media.\n     * Files will be deleted when the application is uninstalled.\n     *\n     * @since 1.0.0\n     */\n    Directory[\"External\"] = \"EXTERNAL\";\n    /**\n     * The external storage directory\n     * On iOS it will use the Documents directory\n     * On Android it's the primary shared/external storage directory.\n     * It's not accesible on Android 10 unless the app enables legacy External Storage\n     * by adding `android:requestLegacyExternalStorage=\"true\"` in the `application` tag\n     * in the `AndroidManifest.xml`.\n     * It's not accesible on Android 11 or newer.\n     *\n     * @since 1.0.0\n     */\n    Directory[\"ExternalStorage\"] = \"EXTERNAL_STORAGE\";\n})(Directory || (Directory = {}));\nexport var Encoding;\n(function (Encoding) {\n    /**\n     * Eight-bit UCS Transformation Format\n     *\n     * @since 1.0.0\n     */\n    Encoding[\"UTF8\"] = \"utf8\";\n    /**\n     * Seven-bit ASCII, a.k.a. ISO646-US, a.k.a. the Basic Latin block of the\n     * Unicode character set\n     * This encoding is only supported on Android.\n     *\n     * @since 1.0.0\n     */\n    Encoding[\"ASCII\"] = \"ascii\";\n    /**\n     * Sixteen-bit UCS Transformation Format, byte order identified by an\n     * optional byte-order mark\n     * This encoding is only supported on Android.\n     *\n     * @since 1.0.0\n     */\n    Encoding[\"UTF16\"] = \"utf16\";\n})(Encoding || (Encoding = {}));\n/**\n * @deprecated Use `Directory`.\n * @since 1.0.0\n */\nexport const FilesystemDirectory = Directory;\n/**\n * @deprecated Use `Encoding`.\n * @since 1.0.0\n */\nexport const FilesystemEncoding = Encoding;\n","import { WebPlugin, buildRequestInit } from '@capacitor/core';\nimport { Encoding } from './definitions';\nfunction resolve(path) {\n    const posix = path.split('/').filter(item => item !== '.');\n    const newPosix = [];\n    posix.forEach(item => {\n        if (item === '..' &&\n            newPosix.length > 0 &&\n            newPosix[newPosix.length - 1] !== '..') {\n            newPosix.pop();\n        }\n        else {\n            newPosix.push(item);\n        }\n    });\n    return newPosix.join('/');\n}\nfunction isPathParent(parent, children) {\n    parent = resolve(parent);\n    children = resolve(children);\n    const pathsA = parent.split('/');\n    const pathsB = children.split('/');\n    return (parent !== children &&\n        pathsA.every((value, index) => value === pathsB[index]));\n}\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n        /**\n         * Function that performs a http request to a server and downloads the file to the specified destination\n         *\n         * @param options the options for the download operation\n         * @returns a promise that resolves with the download file result\n         */\n        this.downloadFile = async (options) => {\n            const requestInit = buildRequestInit(options, options.webFetchExtra);\n            const response = await fetch(options.url, requestInit);\n            let blob;\n            if (!(options === null || options === void 0 ? void 0 : options.progress))\n                blob = await response.blob();\n            else if (!(response === null || response === void 0 ? void 0 : response.body))\n                blob = new Blob();\n            else {\n                const reader = response.body.getReader();\n                let bytes = 0;\n                const chunks = [];\n                const contentType = response.headers.get('content-type');\n                const contentLength = parseInt(response.headers.get('content-length') || '0', 10);\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done)\n                        break;\n                    chunks.push(value);\n                    bytes += (value === null || value === void 0 ? void 0 : value.length) || 0;\n                    const status = {\n                        url: options.url,\n                        bytes,\n                        contentLength,\n                    };\n                    this.notifyListeners('progress', status);\n                }\n                const allChunks = new Uint8Array(bytes);\n                let position = 0;\n                for (const chunk of chunks) {\n                    if (typeof chunk === 'undefined')\n                        continue;\n                    allChunks.set(chunk, position);\n                    position += chunk.length;\n                }\n                blob = new Blob([allChunks.buffer], { type: contentType || undefined });\n            }\n            const blobUrl = URL.createObjectURL(blob);\n            const tempAnchor = document.createElement('a');\n            document.body.appendChild(tempAnchor);\n            tempAnchor.href = blobUrl;\n            tempAnchor.download = options.path; // This should be a filename, not a path\n            tempAnchor.click();\n            URL.revokeObjectURL(blobUrl);\n            document.body.removeChild(tempAnchor);\n            return { path: options.path, blob };\n        };\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        if (!encoding) {\n            data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n            if (!this.isBase64String(data))\n                throw Error('The supplied data is not valid base64 content.');\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: now,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (!encoding && !this.isBase64String(data))\n            throw Error('The supplied data is not valid base64 content.');\n        if (occupiedEntry !== undefined) {\n            if (occupiedEntry.content !== undefined && !encoding) {\n                data = btoa(atob(occupiedEntry.content) + atob(data));\n            }\n            else {\n                data = occupiedEntry.content + data;\n            }\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n            IDBKeyRange.only(path),\n        ]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry.name}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const files = await Promise.all(entries.map(async (e) => {\n            let subEntry = (await this.dbRequest('get', [e]));\n            if (subEntry === undefined) {\n                subEntry = (await this.dbRequest('get', [e + '/']));\n            }\n            return {\n                name: e.substring(path.length + 1),\n                type: subEntry.type,\n                size: subEntry.size,\n                ctime: subEntry.ctime,\n                mtime: subEntry.mtime,\n                uri: subEntry.path,\n            };\n        }));\n        return { files: files };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        await this._copy(options, true);\n        return;\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return {\n                uri: toPath,\n            };\n        }\n        if (isPathParent(fromPath, toPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                let encoding;\n                if (!this.isBase64String(file.data)) {\n                    encoding = Encoding.UTF8;\n                }\n                // Write the file to the new location\n                const writeResult = await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                    encoding: encoding,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return writeResult;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename.name}`,\n                        to: `${to}/${filename.name}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n        return {\n            uri: toPath,\n        };\n    }\n    isBase64String(str) {\n        try {\n            return btoa(atob(str)) == str;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n}\nFilesystemWeb._debug = true;\n"],"x_google_ignoreList":[0,1]}